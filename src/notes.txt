TODO:
-use Dijkstra's to find vertical seam
-implement efficient deletion and recovery method
-implement carve method
-implement horizontal seam carving as well
-implement growth with interpellation, left-right averaging, or something else
    -left-right averaging means deleting the original seam and replacing it with two new ones:
        left-original average color
        right-original average color

The key to efficiency in this algorithm is going to be the method of deletion and restoration, because energy would have to be recalculated, and
putting an image back together again takes a long time as well.
The problem of the efficiency comes from having to update both the energy array and the color array

******What if i had an array of Pixels, with class Pixel having double energy and Color color,
and then build and export and open the new BufferedImage at the very end

To update the array after the split:
-row by row, substring the left and right parts together (with the deletion marking the split)
-only recalculate the indexes that were to the deletion's immediate left and right and their affected neighbors
    use the seam location array to tell you where the deleted Pixel was for each row

