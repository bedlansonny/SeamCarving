***new plan***:
When deleting or duplicating seams to fit a target resolution,
find the best n amount of seam paths and return them, probably through
an array of all the seam arrays, therefore a 2d array.
	Hint: set all pixels containing previous shortest paths to visited at the beginning of searching
	for each new path. There may be a faster way, google it!
	Important**: This means that if a pixel of a used seam is
	    to a pixel's bottom right, its true bottom right is not [y+1][x+1], but [y+1][x+2]
	    true bottom is not [y+1][x] but [y+1][x+1] <-- apparently not always true
	    true bottom right is not [y+1][x-1] but [y+1][x-2]
	    ** unless that is also a removed pixel, then keep checking in that direction until looped around
Then, based on whether you are expanding by that amount or shortening by that amount,
either duplicate them or remove them through splicing.
Then, and only then, update the energy values of all the effected cells.
	Hint: If removing, only energy update the seams that were to the left and right of the removed one.
	If duplicating, only energy update the original and its duplicate, not the ones to the left and right.

TODO:
x-use Dijkstra's to find vertical seam
-implement efficient deletion and recovery method
x-implement horizontal seam carving as well
-implement growth with interpellation, left-right averaging, or something else
    -left-right averaging means deleting the original seam and replacing it with two new ones:
        left-original average color
        right-original average color
    BETTER METHOD:
        when shrinking by n, find the n lowest energy seams and duplicate them all.
-create method to change picture into an ideal resolution with seam carving
-create a gui and make it a webapp
-allow selection of certain objects to definitely remove or definitely keep


The key to efficiency in this algorithm is going to be the method of deletion and restoration, because energy would have to be recalculated, and
putting an image back together again takes a long time as well.
The problem of the efficiency comes from having to update both the energy array and the color array

******What if i had an array of Pixels, with class Pixel having double energy and Color color,
and then build and export and open the new BufferedImage at the very end

To update the array after the split:
-row by row, substring the left and right parts together (with the deletion marking the split)
-only recalculate the indexes that were to the deletion's immediate left and right and their affected neighbors
    use the seam location array to tell you where the deleted Pixel was for each row


idea, though likely inefficient:
When wanting to shrink the image by amount n columns:
It may be more efficient to find all of the most efficient n seams and remove them all at once,
rather than removing one and updating the new image each time
    biggest problem with this idea: you would have to skip the pixels in the seam rather than ignoring it, because
    the removal of a seam changes the children of pixels, causing you to have to check different coordinates when checking
    below, below left, and below right.
Strategy:
    -find best path and store it
    -reset all stuff: visited, prev, traveled, and set all pixels in best discovered paths so far to visited
    -find the best path again, somehow changing the children properly